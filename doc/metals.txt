*metals.txt* nvim-metals
A nvim plugin for Metals utilizing Neovim's built-in LSP support.

https://scalameta.org/metals/

                            NVIM-METALS REFERENCE MANUAL

CONTENTS                                                           *nvim-metals*

    0. Introduction ......... |metals-introduction|
    1. Prerequisites......... |metals-prerequisites|
    2. Getting Started....... |metals-getting-started|
    3. Options............... |metals-options|
    4. Commands.............. |metals-commands|
    5. Lua API............... |metals-lua-api|
    6. Custom Handlers....... |metals-custom-handlers|
    7. Functions............. |metals-functions|

================================================================================
INTRODUCTION                                                *metals-introdction*
nvim-metals is a plugin built to provide a better experience while using
Metals, the Scala Language Server, with Neovim's built-in LSP support. This
plugin provides the necessary commands you'll need to develop with nvim and
Metals. This extension also implements many of the custom Metals LSP
extensions that will give you a much richer experience than just using Metals
with the default nvim-lspconfig setup, as well as automatically setting all of
the correct `init_options`.

================================================================================
PREREQUISITES                                             *metals-prerequisites*

- Nvim v0.5.x The later the snapshot the better unitl v0.5.x stable is
  released.
- *DO NOT* use this plugin for Metals and also nvim/nvim-lspconfig for Metals.
  If you've used this plugin before with Metals, make sure to remove the
  Metals installation that it installed. If you have that plugin installed,
  while in a Scala file, `:LspInstallInfo` should just show you a `{}`. If it
  shows you a path where Metals is installed, you'll need to remove it. If
  not, both plugins will start an instance of Metals giving you all sorts of
  problems. NOTE: that keeping the plugin installed for other LSP servers is
  totally fine, just let nvim-metals handle Metals.

================================================================================
GETTING STARTED                                         *metals-getting-started*

Once installed, the most basic setup is to have the following >

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala lua require('metals').initialize_or_attach({})
    augroup end
  endif
<

This will give you the the defaults that Metals provides. The empty `{}` that
is passed into |initialize_or_attach()| is necessary and is actually the
config object that is directly passed into the |vim.lsp.start_client()|
method. You can read more about it in |:h vim.lsp.start_client()| to see all
of the base options. This is is the primary way to edit your `init_option`,
change or add any cusom `handlers`. For example, it's recommened to set your
`statusBarProvider` to `on`, and once you have your statusline setup to
handle the messages, you could turn it on like so: >

  metals_config = {}
  metals_config.init_options = {}

  metals_config.init_options.statusBarProvider = 'on'
<

Then instead of passing an empty `{}` to |initialize_or_attach()|,  you'd pass
in `metals_config`.

Once setup, the first time you open a Scala project you'll be prompted to
install Metals. You can do this with the following command: |:MetalsInstall|.

In order to install the latest snapshot of metals, you'll need to have set the
following: >

  let g:metals_server_version = '0.9.7+236-8d0924af-SNAPSHOT'
<

If no version is set, it defaults to the latest stable release. If a new
release comes out or you change your |g:metals_server_version|,  you can
simply issue another |:MetalsInstall| command which also serves as an update
command.

================================================================================
OPTIONS                                                         *metals-options*

The following options are provided by nvim-metals.

                                                       *g:metals_server_version*
Type: string ~
Default: 'latest.stable' ~

Targeted server version that you'd like to install. Note that if this is
changed you need to do a |:MetalsInstall| again to ensure that it is
installed. If you need to check what version you're currently using, you can
use the |:MetalsInfo| command.

                                                     *g:metals_decoration_color*
Type: string ~
Default: 'Conceal' ~

The hightlight group that will be used to show decorations. For example, this
will change the way worksheet evaluations are displayed in `*.worksheet.sc`
file.

================================================================================
COMMANDS                                                       *metals-commands*

The following commands are provided by nvim-metals.

                                                                        *Format*
Format                       Format the current buffer utilizing. (Make sure to
                             have a .scalafmt.conf file.)

                                                             *MetalsAmmoniteEnd*
MetalsAmmoniteEnd            End the Ammonite BSP Server.

                                                           *MetalsAmmoniteStart*
MetalsAmmoniteStart          Start the Ammonite BSP Server.

                                                            *MetalsBuildConnect*
MetalsBuildConnect           Manually connect to the build server.

                                                             *MetalsBuildImport*
MetalsBuildImport            Trigger an import for the current workspace.

                                                            *MetalsBuildRestart*
MetalsBuildRestart           Manually restart the build server.

                                                          *MetalsCompileCascade*
MetalsCompileCascade         Compile the current open file along with all build
                             targets that depend on it.

                                                                  *MetalsDoctor*
MetalsDoctor                 Run Metals Doctor, which will open in your browser.

                                                                 *MetalsInstall*
MetalsInstall                Install or update Metals.

                                                                    *MetalsInfo*
MetalsInfo                   Give info about the currently installed version
                             of Metals that will be used.

                                                               *MetalsLogToggle*
MetalsLogsToggle             Opens the embedded Nvim terminal tailing the
                             |.metals/metals.log| file in your worksapce. If
                             triggered again, this won't actual toggle the logs.
                             This is doen mainly to avoid someone simply |q|ing
                             the terminal thinking it's closed when the buffer
                             is actually still there. If this happens, you will
                             be warned that the terminal buffer still exists and
                             that you should do an |ls| to find it.

                                                            *MetalsNewScalaFile*
MetalsNewScalaFile           Create a new Scala file. This will produce a
                             prompt for the user to choose what type of file
                             they'd like (case class, trait, object, etc) and
                             also prompts for a name.

                                                             *MetalsSourcesScan*
MetalsSourcesScan            Scan all workspaces sources.

================================================================================
LUA API                                                         *metals-lua-api*

The following Lua module functions are exposed for you to use in via mappings.
In order to use any of these you'd need to require the module. As an example,
if you wanted to bind the |buid_import()| to a mapping, you could do the
following. >

  nnoremap <silent> <leader>bi  <cmd>lua require'metals'.build_import()<CR>
<

                                                                *ammonite_end()*
ammonite_end()            Use to execute a |metals.ammonite-end| command.

                                                              *ammonite_start()*
ammonite_start()          Use to execute a |metals.ammonite-start| command.

                                                               *build_connect()*
build_connect()           Use to execute a |metals.build-connect| command.

                                                                *build_import()*
build_import()            Use to execute a |metals.build-import| command.

                                                               *build_restart()*
build_restart()           Use to execute a |metals.build-restart| command.

                                                             *compile_cascade()*
compile_cascade()         Use to execute a |metals.compile-cascade| command.

                                                                  *doctor_run()*
doctor_run()              Use to execute a |metals.doctor-run| command.

                                                        *initialize_or_attach()*
initialize_or_attach({config})    
                  
                          This is the main entrypoint into the plugin, and the
                          way to set up nvim-metals. This would be usied in
                          the following way: >

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala lua require('metals').initialize_or_attach({})
    augroup end
  endif
<
                          Parameters:
                          {config} This config is meant to mimic the config
                          that is used in the |vim.lsp.start_client()|. You
                          can visit the help docs of vim to see the full
                          signature of the config.

                                                                        *info()*
info()                    Give info about the currently installed version of
                          Metals that will be used by nvim-metals.

                                                           *install_or_update()*
install_or_update()       Install Metals if it doesn't exist or update to the
                          latest stable version or version set if
                          |g.metals_server_version| is set.

                                                                 *logs_toggle()*
logs_toggle()             Use to trigger a |tail -f .metals/log| on your current
                          workspace that will open in the embedded Neovim
                          terminal.

open_all_diagnostics()   Fills the quickfix list with the LSP diagnostics
                         for all buffers and opens it.
                         WARNING: Automatic updates in the quickfix for new
                         diagnostics are not yet implemented.
                         After opening the quickfix, in order to refesh
                         diagnostics the function must be called again.

                                                          *show_hover_message()*
show_hover_message()     Use to expand the decoration to show the full hover
                         message that was returned from the decoration.

                                                                *sources_scan()*
sources_scan()            Use to execute a |metals.sources-scan| command.

================================================================================
CUSTOM HANDLERS                                         *metals-custom-handlers*

The following are extra handlers that nvim-metals implements. More than likely
you'll never directly use these, but they are more of a reference of the extra
things that nvim-metals is providing you.

                                                             *['metals/status']*
['metals/status']({err}, {method}, {result})
                          Used to enable handling of |metals/status|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsStatusParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsstatus

                                                           *['metals/inputBox']*
['metals/inputBox']({err}, {method}, {result})
                          Used to enable handling of |metals/inputBox|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsInputBoxParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsinputbox

                                                          *['metals/quickPick']*
['metals/quickPick']({err}, {method}, {result})
                          Used to enable handling of |metals/quickPick|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsquickpick

                                               *['metals/executeClientCommand']*
['metals/executeClientCommand']({err}, {method}, {result})
                          Used to enable handling of
                          |metals/executeClientCommand|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsexecuteclientcommand

                                                        *['textDocument/hover']*
['textDocument/hover']({err}, {method}, {result})
                          Used to override the default ["textDocument/hover"]
                          callback since the default doesn't wrap lines.

                          Parameters:
                          {err}    Hover error
                          {method} textDocument/hover
                          {result} hover results from the server

                                                 *['window/showMessageRequest']*

['window/showMessageRequest']({err}, {method}, {result})
                          Used to request an answer from the user.

                          Note that this is only in here temporarily. Once
                          this is solidified we should try to just upstream
                          it.

                          Parameters:
                          {err}    Message request error
                          {method} window/showMessageRequest
                          {result} ShowMessageRequestParams 
================================================================================
FUNCTIONS                                                     *metals-functions*

                                                               *metals#status()*
metals#status()           Able to be used in your statusline to show status
                          messages from Metals. In order for this to be set,
                          you need to ensure that |statusBarProvider| is set
                          to |on|, and the |metals/status| callback is set to
                          |metals_status|.

                                                               *metals#errors()*
metals#errors()          Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsErrorSign|
                         and |lsp.util.buf_diagnostics_count("Error")| to
                         return a string of sign + count of errors in the
                         current buffer.

                                                             *metals#warnings()*
metals#warnings()        Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsWarningSign|
                         and |lsp.util.buf_diagnostics_count("Warning")| to
                         return a string of sign + count of warnings in the
                         current buffer.
vim:tw=80:ts=2:ft=help:
