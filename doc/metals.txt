*metals.txt* nvim-metals
A nvim plugin for Metals utilizing Neovim's built-in LSP support.

https://scalameta.org/metals/

                            NVIM-METALS REFERENCE MANUAL

CONTENTS                                                           *nvim-metals*

    0. Introduction ......... |metals-introduction|
    1. Prerequisites......... |metals-prerequisites|
    2. Getting Started....... |metals-getting-started|
    3. Settings.............. |metals-settings|
    4. Options............... |metals-options|
    5. Commands.............. |metals-commands|
    6. Lua API............... |metals-lua-api|
    7. Custom Handlers....... |metals-custom-handlers|
    8. Functions............. |metals-functions|

================================================================================
INTRODUCTION                                                *metals-introdction*
nvim-metals is a Lua plugin built to provide a better experience while using
Metals, the Scala Language Server, with Neovim's built-in LSP support. This
plugin provides the necessary commands you'll need to develop with nvim and
Metals. This extension also implements many of the custom Metals LSP
extensions that will give you a much richer experience than just using Metals
with the default nvim-lspconfig setup, as well as automatically setting all of
the correct `init_options`.

================================================================================
PREREQUISITES                                             *metals-prerequisites*

- Nvim v0.5.x The later the snapshot the better unitl v0.5.x stable is
  released. _NOTE_: Make sure the version you're using includes commit
  #6e660d4.
- *DO NOT* use this plugin for Metals and also `nvim/nvim-lspconfig` for
  Metals.  If you've used `nvim-nvim-lspconfig` before with Metals, make sure
  to remove metals setup for it as it and this plugin will conflict.  NOTE:
  that keeping the plugin installed for other LSP servers is totally fine,
  just let nvim-metals handle Metals.

================================================================================
GETTING STARTED                                         *metals-getting-started*

Once installed, the most basic setup is to have the following >

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala lua require('metals').initialize_or_attach({})
    augroup end
  endif
<

This will give you the the defaults that Metals provides. The empty `{}` that
is passed into |initialize_or_attach()| is necessary and is very similiar to
the config object that is directly passed into the |vim.lsp.start_client()|
method. The only differences is the addition of settings and root_patterns.
You can read more about it in |:h vim.lsp.start_client()| to see all of the
base options. This is is the primary way to edit your `init_option`, change or
add any cusom `handlers`, and set any configurartion settings. For example,
it's recommened to set your `statusBarProvider` to `on`, and once you have
your statusline setup to handle the messages, you could turn it on like so: >

  metals_config = require'metals'.bare_config
  metals_config.init_options.statusBarProvider = 'on'
<

Then instead of passing an empty `{}` to |initialize_or_attach()|,  you'd pass
in `metals_config`.

Once setup, the first time you open a Scala project you'll be prompted to
install Metals. You can do this with the following command: |:MetalsInstall|.

In order to install the latest snapshot of metals, you'll need to have set the
following: >

  let g:metals_server_version = '0.9.7+236-8d0924af-SNAPSHOT'
<

If no version is set, it defaults to the latest stable release. If a new
release comes out or you change your |g:metals_server_version|,  you can
simply issue another |:MetalsInstall| command which also serves as an update
command.

================================================================================
SETTINGS                                                       *metals-settings*

The following settings are able to be passed along with the config table to
|initialize_or_attatch()|. The keys are check to ensure that you don't pass in
a setting that is not a valid Metals setting. You can set these like the
example below shows: >

  metals_config = require'metals'.bare_config
  metals_config.settings = {
    showImplicitArguments = true,
    excludePackages = {
      "akka.actor.typed.javadsl",
      "com.github.swagger.akka.javadsl"
    }
  }
<
The following are all of the currently available settings. Note that this
isn't necessarilly all of the settings that Metals has, but all of the
settings that can currently be used with nvim-metals. Ones that will have no
affect are simply skipped for now.

NOTE: keep in mind that for now, when settings are set, they are only sent
once to the server with a `workspace/didChangeConfiguration` right after
initialization. If you change your settings, you'll need to restart nvim for
them to take affect.

ammoniteJvmProperties                                    *ammoniteJvmProperties*

Type: table as list ~
Default: {} ~

Optional list of JVM properties to pass along to the Ammonite server. Each
property needs to be a separate item. >
  {"-Xmx1G", "-Xms100M"}
<

bloopSbtAlreadyInstalled                              *bloopSbtAlreadyInstalled*

Type: boolean ~
Default: false ~

If true, Metals will not generate `metals.sbt` files under the assumption that
sbt-bloop is already manually installed in the sbt build. Build import will
fail with a 'not valid command bloopInstall' error in case Bloop is not
manually installed in the build when using this option.

bloopVersion                                                      *bloopVersion*

Type: string ~
Default: Whichever is included in your version of Metals ~

This version will be used for the Bloop build tool plugin, for any supported
build tool, while importing in Metals as well as for running the embedded
server. More than likely you'll never need to use this.

excludedPackages                                              *excludedPackages*

Type: table as list ~
Default: {} ~

Packages that will be excluded from completions, imports, and symbol searches.

Note that this is in addition to some default packages that are already
excluded internally in Metals. The default excluded packages are listed below:
>
  META-INF
  images
  toolbarButtonGraphics
  jdk
  sun
  oracle
  java.awt.desktop
  org.jcp
  org.omg
  org.graalvm
  com.oracle
  com.sun
  com.apple
  apple
<

If there is a need to remove one of the defaults, you are able to do so by
including the package in your list and prepending `--` to it. >
  ["--sun"]
<

gradeleScript                                                     *gradleScript*

Type: string ~
Default: '' ~

Optional absolute path to a gradle executable to use for running gradle
bloopInstall. By default, Metals uses gradlew with 5.3.1 gradle version.
Update this setting if your gradle script requires more customizations like
using environment variables.

mavenScript                                                        *mavenScript*

Type: string ~
Default: '' ~

Optional absolute path to a maven executable to use for generating bloop
config. By default, Metals uses mvnw maven wrapper with 3.6.1 maven version.
Update this setting if your maven script requires more customizations

millScript                                                          *millScript*

Type: string ~
Default: '' ~

Optional absolute path to a mill executable to use for running mill
mill.contrib.Bloop/install. By default, Metals uses mill wrapper script with
0.5.0 mill version. Update this setting if your mill script requires more
customizations like using environment variables.
javaHome                                                              *javaHome*

Type: string ~
Default: falls back to JAVA_HOME ~

The Java Home directory used for indexing JDK sources and locating the java
binary.

remoteLanguageServer                                      *remoteLanguageServer*

Type: string ~
Default: '' ~

A URL pointing to an endpoint that implements a remote language server.

See https://scalameta.org/metals/docs/contributors/remote-language-server.html
for documentation on remote language servers.

sbtScript                                                            *sbtScript*

Type: string ~
Default: '' ~

Optional absolute path to an sbt executable to use for running sbt
bloopInstall. By default, Metals uses java -jar sbt-launch.jar with an
embedded launcher while respecting .jvmopts and .sbtopts. Update this setting
if your sbt script requires more customizations like using environment
variables.

scalafixConfigPath                                          *scalafixConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafix.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).

scalafmtConfigPath                                          *scalafmtConfigPath*

Type: string ~
Default: '' ~

Optional custom path to the .scalafmt.conf file. Should be an absolute path
and use forward slashes / for file separators (even on Windows).


showImplicitArguments                                    *showImplicitArguments*

Type: boolean ~
Default: false ~

When this option is enabled, each method that has implicit arguments has them
displayed as extra info in the hover.

showImplicitConversionsAndClasses            *showImplicitConversionsAndClasses*

Type: boolean ~
Default: false ~

When this option is enabled, each place where an implicit method or class is
used has it displayed as extra info in the hover.

showInferredType                                              *showInferredType*

Type: boolean ~
Default: false ~

When this option is enabled, each method that can have inferred types has them
displayed as extra info in the hover.

================================================================================
OPTIONS                                                         *metals-options*

The following options are provided by nvim-metals.

                                                       *g:metals_server_version*
Type: string ~
Default: 'latest.stable' ~

Targeted server version that you'd like to install. Note that if this is
changed you need to do a |:MetalsInstall| again to ensure that it is
installed. If you need to check what version you're currently using, you can
use the |:MetalsInfo| command.

                                                     *g:metals_decoration_color*
Type: string ~
Default: 'Conceal' ~

The hightlight group that will be used to show decorations. For example, this
will change the way worksheet evaluations are displayed in `*.worksheet.sc`
file.

================================================================================
COMMANDS                                                       *metals-commands*

The following commands are provided by nvim-metals.

                                                                        *Format*
Format                       Format the current buffer utilizing. (Make sure to
                             have a .scalafmt.conf file.)

                                                             *MetalsAmmoniteEnd*
MetalsAmmoniteEnd            End the Ammonite BSP Server.

                                                           *MetalsAmmoniteStart*
MetalsAmmoniteStart          Start the Ammonite BSP Server.

                                                               *MetalsBspSwitch*
MetalsBspSwitch              Prompts the user to select a new build server to
                             connect to. This command does nothing in case there
                             are less than two installed build servers on the
                             computer. In case the user has multiple BSP servers
                             installed then Metals will prompt the user to
                             select which server to use.

                                                            *MetalsBuildConnect*
MetalsBuildConnect           Manually connect to the build server.

                                                         *MetalsBuildDisconnect*
MetalsBuildDisconnect        Manually disconnect to the build server without
                             reconnecting.

                                                             *MetalsBuildImport*
MetalsBuildImport            Trigger an import for the current workspace.

                                                            *MetalsBuildRestart*
MetalsBuildRestart           Manually restart the build server.

                                                           *MetalsCompileCancel*
MetalsCompileCancel          Cancel any ongoing compilation.

                                                            *MetalsCompileClean*
MetalsCompileClean           Recompile all build targets in this workspace. By
                             default, Metals compiles the files incrementally.
                             In case of any compile artifacts corruption this
                             command might be run to make sure everything is
                             recompiled correctly.

                                                          *MetalsCompileCascade*
MetalsCompileCascade         Compile the current open file along with all build
                             targets that depend on it.

                                                                  *MetalsDoctor*
MetalsDoctor                 Run Metals Doctor, which will open in your browser.

                                                       *MetalsGenerateBspConfig*
MetalsGenerateBspConfig      Checks to see if your build tool can serve as a BSP
                             server. If so, generate the necessary BSP config to
                             connect to the server. If there is more than one
                             build tool for a workspace, you can then choose the
                             desired one and that one will be used to generate
                             the config. After the config is generated, Metals
                             will attempt to auto-connect to it.

                                                                 *MetalsInstall*
MetalsInstall                Install or update Metals.

                                                                    *MetalsInfo*
MetalsInfo                   Give info about the currently installed version
                             of Metals that will be used.

                                                               *MetalsLogToggle*
MetalsLogsToggle             Opens the embedded Nvim terminal tailing the
                             |.metals/metals.log| file in your worksapce. If
                             triggered again, this won't actual toggle the logs.
                             This is doen mainly to avoid someone simply |q|ing
                             the terminal thinking it's closed when the buffer
                             is actually still there. If this happens, you will
                             be warned that the terminal buffer still exists and
                             that you should do an |ls| to find it.

                                                            *MetalsNewScalaFile*
MetalsNewScalaFile           Create a new Scala file. This will produce a
                             prompt for the user to choose what type of file
                             they'd like (case class, trait, object, etc) and
                             also prompts for a name.

                                                          *MetalsQuickWorksheet*
MetalsQuickWorksheet         Creats a worksheet in the current director that
                             you're in with the name of the worksheet being the
                             parent dir.

                             Example: If you're in
                             `src/main/scala/example/Main.scala` and you
                             execute this command the file you'll have created
                             will be
                             `src/main/scala/example/example.worksheet.sc`.

                                                             *MetalsSourcesScan*
MetalsSourcesScan            Scan all workspaces sources.

================================================================================
LUA API                                                         *metals-lua-api*

The following Lua module functions are exposed for you to use in via mappings.
In order to use any of these you'd need to require the module. As an example,
if you wanted to bind the |buid_import()| to a mapping, you could do the
following. >

  nnoremap <silent> <leader>bi  <cmd>lua require'metals'.build_import()<CR>
<

                                                                *ammonite_end()*
ammonite_end()            Use to execute a |metals.ammonite-end| command.

                                                              *ammonite_start()*
ammonite_start()          Use to execute a |metals.ammonite-start| command.

                                                                   *bare_config*
bare_config
                          An empty config table with empty tables also set for
                          settings, handlers, and init_options.

                                                               *build_connect()*
build_connect()           Use to execute a |metals.build-connect| command.

                                                                *build_import()*
build_import()            Use to execute a |metals.build-import| command.

                                                               *build_restart()*
build_restart()           Use to execute a |metals.build-restart| command.

                                                             *compile_cascade()*
compile_cascade()         Use to execute a |metals.compile-cascade| command.

                                                                  *doctor_run()*
doctor_run()              Use to execute a |metals.doctor-run| command.

                                                        *initialize_or_attach()*
initialize_or_attach({config})    
                  
                          This is the main entrypoint into the plugin, and the
                          way to set up nvim-metals. This would be usied in
                          the following way: >

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala lua require('metals').initialize_or_attach({})
    augroup end
  endif
<
                          Parameters:
                          {config} This config is meant to mimic the config
                          that is used in the |vim.lsp.start_client()|. You
                          can visit the help docs of vim to see the full
                          signature of the config.

                          There is also two extra keys top this config table.
                          The first is `root_patterns`, which is a short way
                          to change the `root_dir` of the config. The default
                          `root_patterns` are >
                             {'build.sbt', 'build.sc', 'build.gradle',
                             'pom.xml', '.git'}
<

                          The second key that is unique to this config is the
                          `settings` key. You can find more information about
                          how to set these in |metals-settings|.

                                                                        *info()*
info()                    Give info about the currently installed version of
                          Metals that will be used by nvim-metals.

                                                           *install_or_update()*
install_or_update()       Install Metals if it doesn't exist or update to the
                          latest stable version or version set if
                          |g.metals_server_version| is set.

                                                                 *logs_toggle()*
logs_toggle()             Use to trigger a |tail -f .metals/log| on your current
                          workspace that will open in the embedded Neovim
                          terminal.

open_all_diagnostics()   Fills the quickfix list with the LSP diagnostics
                         for all buffers and opens it.
                         WARNING: Automatic updates in the quickfix for new
                         diagnostics are not yet implemented.
                         After opening the quickfix, in order to refesh
                         diagnostics the function must be called again.

                                                                *sources_scan()*
sources_scan()            Use to execute a |metals.sources-scan| command.

                                                             *worksheet_hover()*
worksheet_hover()        Use to expand the decoration to show the full hover
                         message that was returned from the decoration.

================================================================================
CUSTOM HANDLERS                                         *metals-custom-handlers*

The following are extra handlers that nvim-metals implements. More than likely
you'll never directly use these, but they are more of a reference of the extra
things that nvim-metals is providing you.

                                                             *['metals/status']*
['metals/status']({err}, {method}, {result})
                          Used to enable handling of |metals/status|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsStatusParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsstatus

                                                           *['metals/inputBox']*
['metals/inputBox']({err}, {method}, {result})
                          Used to enable handling of |metals/inputBox|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsInputBoxParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsinputbox

                                                          *['metals/quickPick']*
['metals/quickPick']({err}, {method}, {result})
                          Used to enable handling of |metals/quickPick|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsquickpick

                                               *['metals/executeClientCommand']*
['metals/executeClientCommand']({err}, {method}, {result})
                          Used to enable handling of
                          |metals/executeClientCommand|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsexecuteclientcommand

                                                        *['textDocument/hover']*
['textDocument/hover']({err}, {method}, {result})
                          Used to override the default ["textDocument/hover"]
                          callback since the default doesn't wrap lines.

                          Parameters:
                          {err}    Hover error
                          {method} textDocument/hover
                          {result} hover results from the server

================================================================================
FUNCTIONS                                                     *metals-functions*

                                                               *metals#status()*
metals#status()           Able to be used in your statusline to show status
                          messages from Metals. In order for this to be set,
                          you need to ensure that |statusBarProvider| is set
                          to |on|, and the |metals/status| callback is set to
                          |metals_status|.

                                                               *metals#errors()*
metals#errors()          Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsErrorSign|
                         and |lsp.util.buf_diagnostics_count("Error")| to
                         return a string of sign + count of errors in the
                         current buffer.

                                                             *metals#warnings()*
metals#warnings()        Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsWarningSign|
                         and |lsp.util.buf_diagnostics_count("Warning")| to
                         return a string of sign + count of warnings in the
                         current buffer.
vim:tw=80:ts=2:ft=help:
