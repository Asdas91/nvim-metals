*metals.txt* nvim-metals
A plugin for Metals utilizing the Neovim built-in LSP support.

https://scalameta.org/metals/

                            NVIM-METALS REFERENCE MANUAL

CONTENTS                                                           *nvim-metals*

    0. Introduction ......... |metals-introduction|
    1. Prerequisites......... |metals-prerequisites|
    2. Commands.............. |metals-commands|
    3. LUA API............... |metals-lua-api|
    4. DECORATION API........ |metals-decoration-api|
    5. Custom Callbacks...... |metals-custom-callbacks|
    6. Functions............. |metals-functions|

================================================================================
INTRODUCTION                                                *metals-introdction*
nvim-metals is a plugin built to provide a better experience while using Metals,
the Scala Language Server with Neovim's built-in LSP support. This plugin offers
extras helpers that allow you to import your build, use specific Metals LSP
extensions, and provide an overall smoother experience than using Metals and
plain built-in LSP support with Neovim.

================================================================================
PREREQUISITES                                             *metals-prerequisites*

- Nvim v0.5.x The latest the snapshot the better.
- neovim/nvim-lsp This plugin contains both automated installation for Metals
  and default setup and configuration. You can find instructions on how to
  install it here: https://github.com/neovim/nvim-lsp
- Snapshot version of Metals. You can find the most recent snapshot version on
  the Metals webiste:
  https://scalameta.org/metals/docs/editors/vim.html#using-latest-metals-snapshot

In order to install the latest snapshot of metals, you'll need to set the
following: >

  let g:metals_server_version = '0.9.0+236-8d0924af-SNAPSHOT'
<

Then continue to follow the nvim-lsp instructions to install Metals via
>
:LspInstall metals
<

================================================================================
COMMANDS                                                       *metals-commands*

The following commands are provided by nvim-metals.

                                                                   *AmmoniteEnd*
AmmoniteEnd               End the Ammonite BSP Server.

                                                                 *AmmoniteStart*
AmmoniteStart             Start the Ammonite BSP Server.

                                                                   *BuildImport*
BuildImport                 Trigger an import for the current workspace.

                                                                  *BuildConnect*
BuildConnect                Manually connect to the build server.

                                                                  *BuildRestart*
BuildRestart                Manually restart the build server.

                                                                *CompileCascade*
CompileCascade             Compile the current open file along with all build
                           targets that depend on it.

                                                                        *Format*
Format                     Format the current buffer utilizing. (Make sure to
                           have a .scalafmt.conf file.)

                                                                  *MetalsDoctor*
MetalsDoctor               Run Metals Doctor, which will open in your browser.

                                                               *MetalsLogToggle*
MetalsLogsToggle          Opens the embedded Nvim terminal tailing the
                          |.metals/metals.log| file in your worksapce. If
                          triggered again, this won't actual toggle the logs.
                          This is doen mainly to avoid someone simply |q|ing the
                          terminal thinking it's closed when the buffer is
                          actually still there. If this happens, you will be
                          warned that the terminal buffer still exists and that
                          you should do an |ls| to find it.

                                                                   *SourcesScan*
SourcesScan               Scan all workspaces sources.

================================================================================
LUA API                                                         *metals-lua-api*

The following Lua module functions are exposed for you to use in via mappings.
In order to use any of these you'd need to require the module. As an example,
if you wanted to bind the |buid_import()| to a mapping, you could do the
following. >

  nnoremap <silent> <leader>bi  <cmd>lua require'metals'.build_import()<CR>
<

                                                                *ammonite_end()*
ammonite_end()            Use to execute a |metals.ammonite-end| command.

                                                              *ammonite_start()*
ammonite_start()          Use to execute a |metals.ammonite-start| command.

                                                               *build_connect()*
build_connect()           Use to execute a |metals.build-connect| command.

                                                                *build_import()*
build_import()            Use to execute a |metals.build-import| command.

                                                               *build_restart()*
build_restart()           Use to execute a |metals.build-restart| command.

                                                             *compile_cascade()*
compile_cascade()         Use to execute a |metals.compile-cascade| command.

                                                                  *doctor_run()*
doctor_run()              Use to execute a |metals.doctor-run| command.

                                                                 *logs_toggle()*
logs_toggle()             Use to trigger a |tail -f .metals/log| on your current
                          workspace that will open in the embedded Neovim
                          terminal.

                                                                *sources_scan()*
sources_scan()            Use to execute a |metals.sources-scan| command.

                                                                *root_pattern()*
root_pattern({target_build_files})
                          Used to override the default |root_dir| function in
                          nvim-lsp. The default does not take into accoun the
                          possiblity of nested build files.

                          Parameters:
                          {target_build_files} Build files you'd like to be
                          recognized.


You use this be overriding the default |root_dir| like below: >

  local nvim_lsp = require'nvim_lsp'
  local metals = require'metals'
  nvim_lsp.metals.setup{
    root_dir = metals.root_pattern("build.sbt", "build.sc");
  }
<

================================================================================
DECORATION API                                           *metals-decoration-api*

The following decoration module functions are used for various decoration
protocol related things.
  https://scalameta.org/metals/docs/editors/decoration-protocol.html

                                                          *show_hover_message()*
show_hover_message()     Use to expand the decoration to show the full hover
                         message that was returned from the decoration.

================================================================================
CUSTOM CALLBACKS                                       *metals-custom-callbacks*

The following are callbacks that users are able to utilize for Metals LSP
extensions or to override existing Nvim LSP callbacks to improve the default
behavior. These can be used either globally or for only Metals.

Example global usage: >

  local metals = require'metals'
  lsp.callbacks['textDocument/hover'] = metals['textDocument/hover']
<

Example usage for only Metals: >

  local nvim_lsp = require'nvim_lsp'
  local metals = require'metals'
  nvim_lsp.metals.setup{
     callbacks = {
      ["textDocument/hover"] = metals['textDocument/hover']
    }
  }
<

                                                        *['textDocument/hover']*
['textDocument/hover']({err}, {method}, {result})
                          Used to override the default ["textDocument/hover"]
                          callback since the default doesn't wrap lines.

                          Parameters:
                          {err}    Hover error
                          {method} textDocument/hover
                          {result} hover results from the server

                                                             *['metals/status']*
['metals/status']({err}, {method}, {result})
                          Used to enable handling of |metals/status|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsStatusParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsstatus

If you are using this, you need to also override the default
|StatusBarProvider| value in |init_options|. You'll also want to ensure that
information is being displayed by your statusline by using the
|metals#status()| function.
>
  local nvim_lsp = require'nvim_lsp'
  local metals = require'metals'
  nvim_lsp.metals.setup{
    init_options = {
      statusBarProvider = "on";
    };
    callbacks = {
      ["metals/status"] = metals.metals_status;
    };
  }
<

                                                           *['metals/inputBox']*
['metals/inputBox']({err}, {method}, {result})
                          Used to enable handling of |metals/inputBox|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsInputBoxParams

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsinputbox

If you are using this, make sure to also set |inputBoxProvider| to true in
your |init_options|

                                                          *['metals/quickPick']*
['metals/quickPick']({err}, {method}, {result})
                          Used to enable handling of |metals/quickPick|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsquickpick

If you are using this, make sure to also set |quickPickProvider| to true in
your |init_options|

                                               *['metals/executeClientCommand']*
['metals/executeClientCommand']({err}, {method}, {result})
                          Used to enable handling of
                          |metals/executeClientCommand|

                          Parameters:
                          {err}    Error
                          {method} metals/status
                          {result} MetalsQuickPickParams 

The spec for this can be found here:

https://scalameta.org/metals/docs/editors/new-editor.html#metalsexecuteclientcommand

If you are using this, make sure to also set |executeClientCommandProvider| to
true in your |init_options|
================================================================================
FUNCTIONS                                                     *metals-functions*

                                                               *metals#status()*
metals#status()           Able to be used in your statusline to show status
                          messages from Metals. In order for this to be set,
                          you need to ensure that |statusBarProvider| is set
                          to |on|, and the |metals/status| callback is set to
                          |metals_status|.

                                                               *metals#errors()*
metals#errors()          Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsErrorSign|
                         and |lsp.util.buf_diagnostics_count("Error")| to
                         return a string of sign + count of errors in the
                         current buffer.

                                                             *metals#warnings()*
metals#warnings()        Meant to be used with a statusline integration. This
                         will re-use the existing |LspDiagnosticsWarningSign|
                         and |lsp.util.buf_diagnostics_count("Warning")| to
                         return a string of sign + count of warnings in the
                         current buffer.
vim:tw=80:ts=2:ft=help:
